package main;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Vector;

public class Highscore
{
	private static final String ID = "id";
	private static final String NAME = "name";
	private static final String SCORE = "score";
	private static final String TABLE_NAME = "highscore";
	private static final String SCHEMA = "APP";
	private static final String CREATE_TABLE_STM = "CREATE TABLE " + TABLE_NAME + "("
			+ ID + " INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
			+ NAME + " VARCHAR(32), "
			+ SCORE + " BIGINT, "
			+ "PRIMARY Key(" + ID + "))";
	
	private enum ORDER_TYPE{NORMAL, ASC, DESC};
	public static final int ORDER_NORMAL = (ORDER_TYPE.NORMAL).ordinal();
	public static final int ORDER_ASC = (ORDER_TYPE.ASC).ordinal();
	public static final int ORDER_DESC = (ORDER_TYPE.DESC).ordinal();
	
	public static class Row
	{
		public int id;
		public String name;
		public long score;
		
		public Row(int id, String name, long score)
		{
			this.id = id;
			this.name = name;
			this.score = score;
		}
	}
	
	private static Connection createConnection() throws ClassNotFoundException, SQLException
	{
		Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
		Connection connection = DriverManager.getConnection("jdbc:derby:./highscore; create=true");
		return connection;
	}
	
	public static boolean createTable()
	{
		boolean created = true;
		try{
			Connection connection = createConnection();
			DatabaseMetaData metaData = connection.getMetaData();
			ResultSet tables = metaData.getTables(null, SCHEMA, TABLE_NAME, null);
			if(!tables.next())
			{
				try{
					Statement statement = connection.createStatement();
					statement.executeUpdate(CREATE_TABLE_STM);
					statement.close();
					System.out.println("Tabelle wurde neu erstellt.");
				}catch(SQLException e){
					created = false;
				}
			}
			connection.close();
		}catch(ClassNotFoundException e){
			System.out.println("Treiberproblem: " + e.getMessage());
		}catch(SQLException e){
			System.out.println("Datenbankproblem: " + e.getMessage());
		}
		return created;
	}
	
	public static boolean insertIntoHighscore(String name, long score)
	{
		boolean inserted = false;
		try{
			Connection connection = createConnection();
			Statement insertStm = connection.createStatement();
			insertStm.executeUpdate("INSERT INTO " + TABLE_NAME + " (" + NAME + ", " + SCORE + ") VALUES('" + name + "', " + score + ")");
			insertStm.close();
			inserted = true;
			connection.close();
		}catch(ClassNotFoundException e){
			System.out.println("Treiberproblem: " + e.getMessage());
		}catch(SQLException e){
			System.out.println("Fehler beim Einfügen: " + e.getMessage());
		}
		return inserted;
	}
	
	public static void deleteEverything()
	{
		try{
			Connection connection = createConnection();
			Statement statement = connection.createStatement();
			statement.executeUpdate("DELETE FROM " + TABLE_NAME);
			statement.executeUpdate("ALTER TABLE " + TABLE_NAME + " ALTER COLUMN " + ID + " RESTART WITH 1");
			connection.close();
		}catch(ClassNotFoundException e){
			System.out.println("Treiberproblem: " + e.getMessage());
		}catch(SQLException e){
			System.out.println("Fehler beim Löschen: " + e.getMessage());
		}
	}
	
	public static Row[] getAllEntries(int type)
	{
		Row[] rows = new Row[0];
		List<Row> list = new Vector<>();
		String sql = "SELECT * FROM " + TABLE_NAME;
		if(type == ORDER_ASC) sql += " ORDER BY " + SCORE + " ASC, " + ID + " ASC";
		else if(type == ORDER_DESC) sql += " ORDER BY " + SCORE + " DESC, " + ID + " ASC";
		try{
			Connection connection = createConnection();
			Statement statement = connection.createStatement();
			ResultSet result = statement.executeQuery(sql);
			while(result.next())
			{
				int id = result.getInt(ID);
				String name = result.getString(NAME);
				long score = result.getLong(SCORE);
				list.add(new Row(id, name, score));
			}
			rows = list.toArray(rows);
			connection.close();
		}catch(ClassNotFoundException e){
			System.out.println("Treiberproblem: " + e.getMessage());
		}catch(SQLException e){
			System.out.println("Fehler beim Lesen: " + e.getMessage());
		}
		return rows;
	}
	
	// TEST
	public static void main(String[] args)
	{
		test1();
		test2();
	}
	
	private static void test2()
	{
		createTable();
		Row[] row = getAllEntries(ORDER_DESC);
		for(int i=0; i<row.length; i++)
		{
			System.out.println(row[i].id + " | " + row[i].name + " | " + row[i].score);
		}
	}
	
	private static void test1()
	{
		createTable();
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String input = "";
		do{
			try{
				String name;
				long score;
				System.out.print("Name: ");
				name = reader.readLine();
				System.out.print("Score: ");
				input = reader.readLine();
				score = Long.parseLong(input);
				insertIntoHighscore(name, score);
				System.out.print("Exit? ");
				input = reader.readLine();
			}catch(Exception e){
				System.out.println("Fehler: " + e.getMessage());
			}
		}while(!input.equalsIgnoreCase("exit"));
	}
}
